{"id":"../node_modules/refractor/lang/lisp.js","dependencies":[{"name":"/Users/adc/Developer/ayrton/react-key-handler/node_modules/refractor/package.json","includedInParent":true,"mtime":499162500000},{"name":"/Users/adc/Developer/ayrton/react-key-handler/package.json","includedInParent":true,"mtime":1535648238901},{"name":"/Users/adc/Developer/ayrton/react-key-handler/.babelrc","includedInParent":true,"mtime":1535642334213}],"generated":{"js":"'use strict'\n\nmodule.exports = lisp\nlisp.displayName = 'lisp'\nlisp.aliases = []\nfunction lisp(Prism) {\n  ;(function(Prism) {\n    // Functions to construct regular expressions\n    // simple form\n    // e.g. (interactive ... or (interactive)\n    function simple_form(name) {\n      return new RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])')\n    }\n    // booleans and numbers\n    function primitive(pattern) {\n      return new RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])')\n    }\n    // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n    var symbol = '[-+*/_~!@$%^=<>{}\\\\w]+'\n    // symbol starting with & used in function arguments\n    var marker = '&' + symbol\n    // Open parenthesis for look-behind\n    var par = '(\\\\()'\n    var endpar = '(?=\\\\))'\n    // End the pattern with look-ahead space\n    var space = '(?=\\\\s)'\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]*|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: new RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: new RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: new RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: new RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [\n        {\n          pattern: new RegExp(\n            par +\n              '(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' +\n              space\n          ),\n          lookbehind: true\n        },\n        {\n          pattern: new RegExp(\n            par +\n              '(?:for|do|collect|return|finally|append|concat|in|by)' +\n              space\n          ),\n          lookbehind: true\n        }\n      ],\n      declare: {\n        pattern: simple_form('declare'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form('interactive'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      boolean: {\n        pattern: primitive('(?:t|nil)'),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: new RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: new RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: new RegExp(\n          par +\n            '(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' +\n            symbol +\n            '\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'\n        ),\n        lookbehind: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          function: {\n            pattern: new RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: new RegExp(par + 'lambda\\\\s+\\\\((?:&?' + symbol + '\\\\s*)*\\\\)'),\n        lookbehind: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: new RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [\n        // open paren, brackets, and close paren\n        /(['`,]?\\(|[)\\[\\]])/,\n        // cons\n        {\n          pattern: /(\\s)\\.(?=\\s)/,\n          lookbehind: true\n        }\n      ]\n    }\n    var arg = {\n      'lisp-marker': new RegExp(marker),\n      rest: {\n        argument: {\n          pattern: new RegExp(symbol),\n          alias: 'variable'\n        },\n        varform: {\n          pattern: new RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n          lookbehind: true,\n          inside: {\n            string: language.string,\n            boolean: language.boolean,\n            number: language.number,\n            symbol: language.symbol,\n            punctuation: /[()]/\n          }\n        }\n      }\n    }\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*'\n    var arglist = {\n      pattern: new RegExp(par + '[\\\\s\\\\S]*' + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: new RegExp('&(?:rest|body)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: new RegExp('&(?:optional|aux)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: new RegExp(\n            '&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'\n          ),\n          inside: arg\n        },\n        argument: {\n          pattern: new RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    }\n    language['lambda'].inside.arguments = arglist\n    language['defun'].inside.arguments = Prism.util.clone(arglist)\n    language['defun'].inside.arguments.inside.sublist = arglist\n    Prism.languages.lisp = language\n    Prism.languages.elisp = language\n    Prism.languages.emacs = language\n    Prism.languages['emacs-lisp'] = language\n  })(Prism)\n}\n","map":{"mappings":[{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/refractor/lang/lisp.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}}],"sources":{"../node_modules/refractor/lang/lisp.js":"'use strict'\n\nmodule.exports = lisp\nlisp.displayName = 'lisp'\nlisp.aliases = []\nfunction lisp(Prism) {\n  ;(function(Prism) {\n    // Functions to construct regular expressions\n    // simple form\n    // e.g. (interactive ... or (interactive)\n    function simple_form(name) {\n      return new RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])')\n    }\n    // booleans and numbers\n    function primitive(pattern) {\n      return new RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])')\n    }\n    // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n    var symbol = '[-+*/_~!@$%^=<>{}\\\\w]+'\n    // symbol starting with & used in function arguments\n    var marker = '&' + symbol\n    // Open parenthesis for look-behind\n    var par = '(\\\\()'\n    var endpar = '(?=\\\\))'\n    // End the pattern with look-ahead space\n    var space = '(?=\\\\s)'\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]*|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: new RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: new RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: new RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: new RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [\n        {\n          pattern: new RegExp(\n            par +\n              '(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' +\n              space\n          ),\n          lookbehind: true\n        },\n        {\n          pattern: new RegExp(\n            par +\n              '(?:for|do|collect|return|finally|append|concat|in|by)' +\n              space\n          ),\n          lookbehind: true\n        }\n      ],\n      declare: {\n        pattern: simple_form('declare'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form('interactive'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      boolean: {\n        pattern: primitive('(?:t|nil)'),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: new RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: new RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: new RegExp(\n          par +\n            '(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' +\n            symbol +\n            '\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'\n        ),\n        lookbehind: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          function: {\n            pattern: new RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: new RegExp(par + 'lambda\\\\s+\\\\((?:&?' + symbol + '\\\\s*)*\\\\)'),\n        lookbehind: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: new RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [\n        // open paren, brackets, and close paren\n        /(['`,]?\\(|[)\\[\\]])/,\n        // cons\n        {\n          pattern: /(\\s)\\.(?=\\s)/,\n          lookbehind: true\n        }\n      ]\n    }\n    var arg = {\n      'lisp-marker': new RegExp(marker),\n      rest: {\n        argument: {\n          pattern: new RegExp(symbol),\n          alias: 'variable'\n        },\n        varform: {\n          pattern: new RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n          lookbehind: true,\n          inside: {\n            string: language.string,\n            boolean: language.boolean,\n            number: language.number,\n            symbol: language.symbol,\n            punctuation: /[()]/\n          }\n        }\n      }\n    }\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*'\n    var arglist = {\n      pattern: new RegExp(par + '[\\\\s\\\\S]*' + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: new RegExp('&(?:rest|body)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: new RegExp('&(?:optional|aux)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: new RegExp(\n            '&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'\n          ),\n          inside: arg\n        },\n        argument: {\n          pattern: new RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    }\n    language['lambda'].inside.arguments = arglist\n    language['defun'].inside.arguments = Prism.util.clone(arglist)\n    language['defun'].inside.arguments.inside.sublist = arglist\n    Prism.languages.lisp = language\n    Prism.languages.elisp = language\n    Prism.languages.emacs = language\n    Prism.languages['emacs-lisp'] = language\n  })(Prism)\n}\n"},"lineCount":201}},"hash":"b4cd8b8f14955cc3079e42095b8a8c90","cacheData":{"env":{}}}