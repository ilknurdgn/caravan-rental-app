{"id":"../node_modules/refractor/lang/markup-templating.js","dependencies":[{"name":"/Users/adc/Developer/ayrton/react-key-handler/node_modules/refractor/package.json","includedInParent":true,"mtime":499162500000},{"name":"/Users/adc/Developer/ayrton/react-key-handler/package.json","includedInParent":true,"mtime":1535648238901},{"name":"/Users/adc/Developer/ayrton/react-key-handler/.babelrc","includedInParent":true,"mtime":1535642334213}],"generated":{"js":"'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  Prism.languages['markup-templating'] = {}\n  Object.defineProperties(Prism.languages['markup-templating'], {\n    buildPlaceholders: {\n      // Tokenize all inline templating expressions matching placeholderPattern\n      // If the replaceFilter function is provided, it will be called with every match.\n      // If it returns false, the match will not be replaced.\n      value: function(env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return\n        }\n        env.tokenStack = []\n        env.code = env.code.replace(placeholderPattern, function(match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match\n          }\n          var i = env.tokenStack.length\n          // Check for existing strings\n          while (\n            env.code.indexOf('___' + language.toUpperCase() + i + '___') !== -1\n          )\n            ++i\n          // Create a sparse array\n          env.tokenStack[i] = match\n          return '___' + language.toUpperCase() + i + '___'\n        })\n        // Switch the grammar to markup\n        env.grammar = Prism.languages.markup\n      }\n    },\n    tokenizePlaceholders: {\n      // Replace placeholders with proper tokens after tokenizing\n      value: function(env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return\n        }\n        // Switch the grammar back\n        env.grammar = Prism.languages[language]\n        var j = 0\n        var keys = Object.keys(env.tokenStack)\n        var walkTokens = function(tokens) {\n          if (j >= keys.length) {\n            return\n          }\n          for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i]\n            if (\n              typeof token === 'string' ||\n              (token.content && typeof token.content === 'string')\n            ) {\n              var k = keys[j]\n              var t = env.tokenStack[k]\n              var s = typeof token === 'string' ? token : token.content\n              var index = s.indexOf('___' + language.toUpperCase() + k + '___')\n              if (index > -1) {\n                ++j\n                var before = s.substring(0, index)\n                var middle = new Prism.Token(\n                  language,\n                  Prism.tokenize(t, env.grammar, language),\n                  'language-' + language,\n                  t\n                )\n                var after = s.substring(\n                  index + ('___' + language.toUpperCase() + k + '___').length\n                )\n                var replacement\n                if (before || after) {\n                  replacement = [before, middle, after].filter(function(v) {\n                    return !!v\n                  })\n                  walkTokens(replacement)\n                } else {\n                  replacement = middle\n                }\n                if (typeof token === 'string') {\n                  Array.prototype.splice.apply(\n                    tokens,\n                    [i, 1].concat(replacement)\n                  )\n                } else {\n                  token.content = replacement\n                }\n                if (j >= keys.length) {\n                  break\n                }\n              }\n            } else if (token.content && typeof token.content !== 'string') {\n              walkTokens(token.content)\n            }\n          }\n        }\n        walkTokens(env.tokens)\n      }\n    }\n  })\n}\n","map":{"mappings":[{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}}],"sources":{"../node_modules/refractor/lang/markup-templating.js":"'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  Prism.languages['markup-templating'] = {}\n  Object.defineProperties(Prism.languages['markup-templating'], {\n    buildPlaceholders: {\n      // Tokenize all inline templating expressions matching placeholderPattern\n      // If the replaceFilter function is provided, it will be called with every match.\n      // If it returns false, the match will not be replaced.\n      value: function(env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return\n        }\n        env.tokenStack = []\n        env.code = env.code.replace(placeholderPattern, function(match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match\n          }\n          var i = env.tokenStack.length\n          // Check for existing strings\n          while (\n            env.code.indexOf('___' + language.toUpperCase() + i + '___') !== -1\n          )\n            ++i\n          // Create a sparse array\n          env.tokenStack[i] = match\n          return '___' + language.toUpperCase() + i + '___'\n        })\n        // Switch the grammar to markup\n        env.grammar = Prism.languages.markup\n      }\n    },\n    tokenizePlaceholders: {\n      // Replace placeholders with proper tokens after tokenizing\n      value: function(env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return\n        }\n        // Switch the grammar back\n        env.grammar = Prism.languages[language]\n        var j = 0\n        var keys = Object.keys(env.tokenStack)\n        var walkTokens = function(tokens) {\n          if (j >= keys.length) {\n            return\n          }\n          for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i]\n            if (\n              typeof token === 'string' ||\n              (token.content && typeof token.content === 'string')\n            ) {\n              var k = keys[j]\n              var t = env.tokenStack[k]\n              var s = typeof token === 'string' ? token : token.content\n              var index = s.indexOf('___' + language.toUpperCase() + k + '___')\n              if (index > -1) {\n                ++j\n                var before = s.substring(0, index)\n                var middle = new Prism.Token(\n                  language,\n                  Prism.tokenize(t, env.grammar, language),\n                  'language-' + language,\n                  t\n                )\n                var after = s.substring(\n                  index + ('___' + language.toUpperCase() + k + '___').length\n                )\n                var replacement\n                if (before || after) {\n                  replacement = [before, middle, after].filter(function(v) {\n                    return !!v\n                  })\n                  walkTokens(replacement)\n                } else {\n                  replacement = middle\n                }\n                if (typeof token === 'string') {\n                  Array.prototype.splice.apply(\n                    tokens,\n                    [i, 1].concat(replacement)\n                  )\n                } else {\n                  token.content = replacement\n                }\n                if (j >= keys.length) {\n                  break\n                }\n              }\n            } else if (token.content && typeof token.content !== 'string') {\n              walkTokens(token.content)\n            }\n          }\n        }\n        walkTokens(env.tokens)\n      }\n    }\n  })\n}\n"},"lineCount":103}},"hash":"c738e69a08af41c11817e97f967fb964","cacheData":{"env":{}}}