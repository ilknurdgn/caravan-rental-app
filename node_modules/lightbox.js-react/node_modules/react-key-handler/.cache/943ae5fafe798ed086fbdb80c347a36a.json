{"id":"../node_modules/refractor/lang/xquery.js","dependencies":[{"name":"/Users/adc/Developer/ayrton/react-key-handler/node_modules/refractor/package.json","includedInParent":true,"mtime":499162500000},{"name":"/Users/adc/Developer/ayrton/react-key-handler/package.json","includedInParent":true,"mtime":1535648238901},{"name":"/Users/adc/Developer/ayrton/react-key-handler/.babelrc","includedInParent":true,"mtime":1535642334213}],"generated":{"js":"'use strict'\n\nmodule.exports = xquery\nxquery.displayName = 'xquery'\nxquery.aliases = []\nfunction xquery(Prism) {\n  ;(function(Prism) {\n    Prism.languages.xquery = Prism.languages.extend('markup', {\n      'xquery-comment': {\n        pattern: /\\(:[\\s\\S]*?:\\)/,\n        greedy: true,\n        alias: 'comment'\n      },\n      string: {\n        pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n        greedy: true\n      },\n      extension: {\n        pattern: /\\(#.+?#\\)/,\n        alias: 'symbol'\n      },\n      variable: /\\$[\\w-:]+/,\n      axis: {\n        pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      'keyword-operator': {\n        pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      keyword: {\n        pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      function: /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n      'xquery-element': {\n        pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'tag'\n      },\n      'xquery-attribute': {\n        pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'attr-name'\n      },\n      builtin: {\n        pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n      operator: [\n        /[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,\n        {\n          pattern: /(\\s)-(?=\\s)/,\n          lookbehind: true\n        }\n      ],\n      punctuation: /[[\\](){},;:/]/\n    })\n    Prism.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i\n    Prism.languages.xquery['tag'].inside[\n      'attr-value'\n    ].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i\n    Prism.languages.xquery['tag'].inside['attr-value'].inside[\n      'punctuation'\n    ] = /^=\"|\"$/\n    Prism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {\n      // Allow for two levels of nesting\n      pattern: /{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,\n      inside: {\n        rest: Prism.languages.xquery\n      },\n      alias: 'language-xquery'\n    }\n    // The following will handle plain text inside tags\n    var stringifyToken = function(token) {\n      if (typeof token === 'string') {\n        return token\n      }\n      if (typeof token.content === 'string') {\n        return token.content\n      }\n      return token.content.map(stringifyToken).join('')\n    }\n    var walkTokens = function(tokens) {\n      var openedTags = []\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i]\n        var notTagNorBrace = false\n        if (typeof token !== 'string') {\n          if (\n            token.type === 'tag' &&\n            token.content[0] &&\n            token.content[0].type === 'tag'\n          ) {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (\n                openedTags.length > 0 &&\n                openedTags[openedTags.length - 1].tagName ===\n                  stringifyToken(token.content[0].content[1])\n              ) {\n                // Pop matching opening tag\n                openedTags.pop()\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                })\n              }\n            }\n          } else if (\n            openedTags.length > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '{' &&\n            // Ignore `{{`\n            (!tokens[i + 1] ||\n              tokens[i + 1].type !== 'punctuation' ||\n              tokens[i + 1].content !== '{') &&\n            (!tokens[i - 1] ||\n              tokens[i - 1].type !== 'plain-text' ||\n              tokens[i - 1].content !== '{')\n          ) {\n            // Here we might have entered an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces++\n          } else if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '}'\n          ) {\n            // Here we might have left an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces--\n          } else if (token.type !== 'comment') {\n            notTagNorBrace = true\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces === 0\n          ) {\n            // Here we are inside a tag, and not inside an XQuery expression.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token)\n            // And merge text with adjacent text\n            if (\n              i < tokens.length - 1 &&\n              (typeof tokens[i + 1] === 'string' ||\n                tokens[i + 1].type === 'plain-text')\n            ) {\n              plainText += stringifyToken(tokens[i + 1])\n              tokens.splice(i + 1, 1)\n            }\n            if (\n              i > 0 &&\n              (typeof tokens[i - 1] === 'string' ||\n                tokens[i - 1].type === 'plain-text')\n            ) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText\n              tokens.splice(i - 1, 1)\n              i--\n            }\n            if (/^\\s+$/.test(plainText)) {\n              tokens[i] = plainText\n            } else {\n              tokens[i] = new Prism.Token(\n                'plain-text',\n                plainText,\n                null,\n                plainText\n              )\n            }\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content)\n        }\n      }\n    }\n    Prism.hooks.add('after-tokenize', function(env) {\n      if (env.language !== 'xquery') {\n        return\n      }\n      walkTokens(env.tokens)\n    })\n  })(Prism)\n}\n","map":{"mappings":[{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/refractor/lang/xquery.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}}],"sources":{"../node_modules/refractor/lang/xquery.js":"'use strict'\n\nmodule.exports = xquery\nxquery.displayName = 'xquery'\nxquery.aliases = []\nfunction xquery(Prism) {\n  ;(function(Prism) {\n    Prism.languages.xquery = Prism.languages.extend('markup', {\n      'xquery-comment': {\n        pattern: /\\(:[\\s\\S]*?:\\)/,\n        greedy: true,\n        alias: 'comment'\n      },\n      string: {\n        pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n        greedy: true\n      },\n      extension: {\n        pattern: /\\(#.+?#\\)/,\n        alias: 'symbol'\n      },\n      variable: /\\$[\\w-:]+/,\n      axis: {\n        pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      'keyword-operator': {\n        pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      keyword: {\n        pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      function: /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n      'xquery-element': {\n        pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'tag'\n      },\n      'xquery-attribute': {\n        pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'attr-name'\n      },\n      builtin: {\n        pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n      operator: [\n        /[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,\n        {\n          pattern: /(\\s)-(?=\\s)/,\n          lookbehind: true\n        }\n      ],\n      punctuation: /[[\\](){},;:/]/\n    })\n    Prism.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i\n    Prism.languages.xquery['tag'].inside[\n      'attr-value'\n    ].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i\n    Prism.languages.xquery['tag'].inside['attr-value'].inside[\n      'punctuation'\n    ] = /^=\"|\"$/\n    Prism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {\n      // Allow for two levels of nesting\n      pattern: /{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,\n      inside: {\n        rest: Prism.languages.xquery\n      },\n      alias: 'language-xquery'\n    }\n    // The following will handle plain text inside tags\n    var stringifyToken = function(token) {\n      if (typeof token === 'string') {\n        return token\n      }\n      if (typeof token.content === 'string') {\n        return token.content\n      }\n      return token.content.map(stringifyToken).join('')\n    }\n    var walkTokens = function(tokens) {\n      var openedTags = []\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i]\n        var notTagNorBrace = false\n        if (typeof token !== 'string') {\n          if (\n            token.type === 'tag' &&\n            token.content[0] &&\n            token.content[0].type === 'tag'\n          ) {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (\n                openedTags.length > 0 &&\n                openedTags[openedTags.length - 1].tagName ===\n                  stringifyToken(token.content[0].content[1])\n              ) {\n                // Pop matching opening tag\n                openedTags.pop()\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                })\n              }\n            }\n          } else if (\n            openedTags.length > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '{' &&\n            // Ignore `{{`\n            (!tokens[i + 1] ||\n              tokens[i + 1].type !== 'punctuation' ||\n              tokens[i + 1].content !== '{') &&\n            (!tokens[i - 1] ||\n              tokens[i - 1].type !== 'plain-text' ||\n              tokens[i - 1].content !== '{')\n          ) {\n            // Here we might have entered an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces++\n          } else if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '}'\n          ) {\n            // Here we might have left an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces--\n          } else if (token.type !== 'comment') {\n            notTagNorBrace = true\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces === 0\n          ) {\n            // Here we are inside a tag, and not inside an XQuery expression.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token)\n            // And merge text with adjacent text\n            if (\n              i < tokens.length - 1 &&\n              (typeof tokens[i + 1] === 'string' ||\n                tokens[i + 1].type === 'plain-text')\n            ) {\n              plainText += stringifyToken(tokens[i + 1])\n              tokens.splice(i + 1, 1)\n            }\n            if (\n              i > 0 &&\n              (typeof tokens[i - 1] === 'string' ||\n                tokens[i - 1].type === 'plain-text')\n            ) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText\n              tokens.splice(i - 1, 1)\n              i--\n            }\n            if (/^\\s+$/.test(plainText)) {\n              tokens[i] = plainText\n            } else {\n              tokens[i] = new Prism.Token(\n                'plain-text',\n                plainText,\n                null,\n                plainText\n              )\n            }\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content)\n        }\n      }\n    }\n    Prism.hooks.add('after-tokenize', function(env) {\n      if (env.language !== 'xquery') {\n        return\n      }\n      walkTokens(env.tokens)\n    })\n  })(Prism)\n}\n"},"lineCount":197}},"hash":"026abc1926a05ba8c42dca1f3f5b4ebe","cacheData":{"env":{}}}